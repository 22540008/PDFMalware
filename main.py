# main.py

import streamlit as st
import requests
import os
import fitz  # PyMuPDF

from feature_extraction import extract_features, save_features_to_csv

st.set_option('deprecation.showfileUploaderEncoding', False)  # To suppress warnings about file uploader encoding

st.sidebar.header('User Input Features')
uploaded_file = st.sidebar.file_uploader("Upload your input PDF file", type=["pdf"])

@st.cache
def load_pdf_features_from_github(pdf_path):
    # Load features extraction code from GitHub
    response = requests.get("https://raw.githubusercontent.com/22540008/PDFMalware/main/feature_extraction.py")
    exec(response.text)

def load_pdf(uploaded_file):
    pdf_content = uploaded_file.read()

    # Check if the PDF content is empty
    if not pdf_content:
        st.error("The uploaded PDF file is empty.")
        return ""

    # Save the PDF content to a temporary file
    temp_dir = "temp"
    os.makedirs(temp_dir, exist_ok=True)
    temp_pdf_path = os.path.join(temp_dir, "temp_pdf.pdf")
    with open(temp_pdf_path, "wb") as temp_pdf_file:
        temp_pdf_file.write(pdf_content)

    return temp_pdf_path  # Return the path instead of text

def load_data(pdf_path, selected_page_count):
    try:
        # Open the temporary PDF file using PyMuPDF
        doc = fitz.open(pdf_path)

        # Initialize a dictionary to store metadata and text
        pdf_info = {"metadata": doc.metadata, "pages": []}

        # Iterate through pages in the document
        for page_number in range(min(selected_page_count, doc.page_count)):
            page = doc[page_number]
            # Append the text of each page to the 'pages' list
            pdf_info["pages"].append(page.get_text())

        # Close the PDF document
        doc.close()

        return pdf_info
    except fitz.fitz.EmptyFileError:
        st.error("Cannot open empty document. The uploaded PDF file is empty.")
        return ""

def save_uploaded_file(uploaded_file):
    # Ensure the 'temp' directory exists
    temp_dir = "temp"
    os.makedirs(temp_dir, exist_ok=True)

    # Save the uploaded file to a temporary location
    pdf_path = os.path.join(temp_dir, uploaded_file.name)
    with open(pdf_path, "wb") as f:
        f.write(uploaded_file.read())  # Use read() instead of getvalue()
    return pdf_path

def main():
    st.title("PDF Analysis App")
    uploaded_file = st.file_uploader("Upload a PDF file", type=["pdf"])
    if uploaded_file is not None:
        # Save the uploaded file to a temporary location
        pdf_path = save_uploaded_file(uploaded_file)

        # Load the PDF text
        text = load_pdf(uploaded_file)
        st.text("Extracted Text:")
        st.text(text)

        # Select the number of pages to display
        selected_page_count = st.slider("Select the number of pages to display", 1, 10, 1)

        # Load PDF information
        pdf_info = load_data(pdf_path, selected_page_count)

        # Display PDF metadata
        st.subheader("PDF Metadata:")
        st.write(pdf_info["metadata"])

        # Display PDF text
        st.subheader("PDF Text:")
        for page_number, page_text in enumerate(pdf_info["pages"], start=1):
            st.write(f"Page {page_number}:")
            st.text(page_text)

        # Load features extraction code from GitHub
        load_pdf_features_from_github(pdf_path)

        # Extract features
        features_df = extract_features(pdf_path)

        # Display the results
        st.dataframe(features_df)

        # Save features to CSV (Optional)
        save_features_to_csv(features_df, "output.csv")

if __name__ == "__main__":
    main()
