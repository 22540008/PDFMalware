# main.py

import streamlit as st
import pandas as pd
import requests
from io import BytesIO
from feature_extraction import extract_features, save_features_to_csv
import os
import fitz  # PyMuPDF


import numpy as np
# import joblib
# import PyPDF2

# import re
# import nltk
# from nltk.corpus import stopwords
# from nltk.stem import PorterStemmer
# from nltk.tokenize import word_tokenize
# import string
import seaborn as sns
import warnings
# import base64
# import time
# import io
from PIL import Image
import matplotlib.pyplot as plt
warnings.filterwarnings('ignore')

# nltk.download('stopwords')
# nltk.download('punkt')
# nltk.download('wordnet')
# nltk.download('averaged_perceptron_tagger')

st.sidebar.header('User Input Features')
uploaded_file = st.sidebar.file_uploader("Upload your input PDF file", type=["pdf"])

@st.cache
def load_pdf_features_from_github(pdf_path):
    # Load features extraction code from GitHub
    response = requests.get("https://raw.githubusercontent.com/22540008/PDFMalware/main/feature_extraction.py")
    exec(response.text)

def load_pdf(uploaded_file):
    pdf_content = uploaded_file.read()

    # Check if the PDF content is empty
    if not pdf_content:
        st.error("The uploaded PDF file is empty.")
        return ""

    # Save the PDF content to a temporary file
    temp_dir = "temp"
    os.makedirs(temp_dir, exist_ok=True)
    temp_pdf_path = os.path.join(temp_dir, "temp_pdf.pdf")
    with open(temp_pdf_path, "wb") as temp_pdf_file:
        temp_pdf_file.write(pdf_content)

    try:
        # Open the temporary PDF file using PyMuPDF
        doc = fitz.open(temp_pdf_path)

        # Initialize an empty string to store the extracted text
        text = ""

        # Iterate through pages in the document
        for page in doc:
            # Append the text of each page to the 'text' string
            text += page.get_text()

        # Close the PDF document
        doc.close()

        return text
    except fitz.fitz.EmptyFileError:
        st.error("Cannot open empty document. The uploaded PDF file is empty.")
        return ""

def load_data(uploaded_file):
    text = load_pdf(uploaded_file)
    if text:
        st.write("Length of extracted text:", len(text))
    return text

def save_uploaded_file(uploaded_file):
    # Ensure the 'temp' directory exists
    temp_dir = "temp"
    os.makedirs(temp_dir, exist_ok=True)

    # Save the uploaded file to a temporary location
    pdf_path = os.path.join(temp_dir, uploaded_file.name)
    with open(pdf_path, "wb") as f:
        f.write(uploaded_file.read())  # Use read() instead of getvalue()
    return pdf_path

def main():
    st.title("PDF Analysis App")
    uploaded_file = st.file_uploader("Upload a PDF file", type=["pdf"])
    if uploaded_file is not None:
        # Save the uploaded file to a temporary location
        pdf_path = save_uploaded_file(uploaded_file)

        # Load the PDF text
        # text = load_pdf(uploaded_file)
        # st.text("Extracted Text:")
        # st.text(text)
        try:
            # Open the temporary PDF file using PyMuPDF
            doc = fitz.open(temp_pdf_path)

            # Initialize an empty string to store the extracted text
            text = ""

            # Iterate through pages in the document
            for page in doc:
                # Append the text of each page to the 'text' string
                text += page.get_text()

            # Close the PDF document
            doc.close()

            return text
        except fitz.fitz.EmptyFileError:
            st.error("Cannot open empty document. The uploaded PDF file is empty.")
            return ""

        
        # Load features extraction code from GitHub
        load_pdf_features_from_github(pdf_path)

        # Extract features
        features_df = extract_features(pdf_path)

        # Display the results
        st.dataframe(features_df)

        # Save features to CSV (Optional)
        save_features_to_csv(features_df, "output.csv")

if __name__ == "__main__":
    main()
