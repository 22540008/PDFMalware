# main.py
import streamlit as st
import requests
from io import BytesIO
import pandas as pd
from feature_extraction import extract_features_and_text

st.sidebar.header('User Input Features')
uploaded_file = st.sidebar.file_uploader("Upload your input PDF file", type=["pdf"])
selected_page_count = st.sidebar.slider("Select number of pages to display", min_value=1, max_value=20, value=5)

# Variable to check if the PDF data has been loaded
pdf_data_loaded = False

@st.cache_data(ttl=3600)  # Set a time-to-live (ttl) value in seconds, adjust as needed
def load_pdf_features_from_github():
    # Load features extraction code from GitHub
    response = requests.get("https://raw.githubusercontent.com/22540008/PDFMalware/main/feature_extraction.py")
    return response.text

def save_uploaded_file(uploaded_file):
    # Save the uploaded file to a temporary location
    with st.spinner("Processing..."):
        temp_pdf_path = "/tmp/temp_pdf.pdf"
        with open(temp_pdf_path, "wb") as f:
            f.write(uploaded_file.read())  # Use read() instead of getvalue()
    return temp_pdf_path

def main():
    global pdf_data_loaded  # Use the global variable

    st.title("PDF Analysis App")
    uploaded_file = st.file_uploader("Upload a PDF file", type=["pdf"])
    if uploaded_file is not None:
        # Check if the PDF data has been loaded
        if not pdf_data_loaded:
            # Load the PDF content including metadata, text, and features
            pdf_path = save_uploaded_file(uploaded_file)
            pdf_info, features = extract_features_and_text(pdf_path, selected_page_count)
            pdf_data_loaded = True

        # Display the extracted text and metadata
        if pdf_info is not None and not pdf_info.empty:
            st.text("PDF Metadata:")
            st.json(pdf_info.metadata)  # Access metadata as an attribute

            st.text("Extracted Text:")
            for page_text in pdf_info["pages"]:
                st.text(page_text)

        # Display the extracted features
        if features is not None:
            st.text("Extracted Features:")
            st.dataframe(features)

if __name__ == "__main__":
    main()
