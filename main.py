# main.py

import streamlit as st
import pandas as pd
import requests
import os
from feature_extraction import extract_features

# Add a button to clear the cache
if st.button("Clear Cache"):
    # Clear the cache
    for key in st.session_state.keys():
        st.session_state.pop(key)

# Variable to check if the feature extraction code has been loaded
feature_code_loaded = False

@st.cache
def load_pdf_features_from_github():
    # Load features extraction code from GitHub
    response = requests.get("https://raw.githubusercontent.com/22540008/PDFMalware/main/feature_extraction.py")
    code = response.text
    return code

def load_feature_module():
    global feature_code_loaded

    # Load features extraction code from GitHub if not already loaded
    if not feature_code_loaded:
        feature_code = load_pdf_features_from_github()
        exec(feature_code, globals())  # Execute the loaded code with the global namespace
        feature_code_loaded = True

def save_uploaded_file(uploaded_file):
    # Ensure the 'temp' directory exists
    temp_dir = "temp"
    os.makedirs(temp_dir, exist_ok=True)

    # Save the uploaded file to a temporary location
    pdf_path = os.path.join(temp_dir, uploaded_file.name)
    with open(pdf_path, "wb") as f:
        f.write(uploaded_file.read()) 
    return pdf_path

def main():
    global feature_code_loaded  # Use the global variable

    st.title("PDF Analysis App")
    uploaded_file = st.file_uploader("Upload a PDF file", type=["pdf"])
    
    # Add a button to trigger another task
    if st.button("Perform Feature Extraction"):
        # Load the feature extraction module
        load_feature_module()

        # Save the uploaded file to a temporary location
        pdf_path = save_uploaded_file(uploaded_file)

        # Extract features from the PDF content
        features_df = extract_features(pdf_path)

        # Display the results
        st.dataframe(features_df)

if __name__ == "__main__":
    main()
